//====================================================================
//        Copyright (c) 2018 Carsten Wulff Software, Norway 
// ===================================================================
// Created       : wulff at 2018-3-19
// ===================================================================
//  The MIT License (MIT)
// 
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//  
//====================================================================
{
	"cells" :
	[
		{ "name": "RM1" , "class" : "cIcCore::PatternResistor",
          "getRuleForHorizontalGrid" : ["M1","width"],
          "getRuleForVerticalGrid" : ["M1","width"],
          "afterNew" :{
              "fillCoordinatesFromStrings" :[[  "M1","ArB"]]
          }
        },
        { "name": "RM4" , "class" : "cIcCore::PatternResistor",
          "getRuleForHorizontalGrid" : ["M4","width"],
          "getRuleForVerticalGrid" : ["M4","width"],
          "afterNew" :{
              "fillCoordinatesFromStrings" :[[  "M4","ArB"]]
          }
        },

        { "name" : "CAP",
          "class" : "Gds::GdsPatternCapacitor",
          "yoffset": -0.5,
          "xoffset": -0.5,
          "widthoffset" : -1,
		  "verticalGridMultiplier" : 1,
		  "horizontalGridMultiplier" :1 ,
          "fillCoordinatesFromStrings" : [

              [   "M1",
                  "-wwwwwwwwkwwwwww------",
                  "----------------------",
				  "----------------------",
                  "-wwwwwwwwkwwwwww------",
                  "----------------------",
				  "----------------------",
                  "----------------------"

              ],
              [   "M2",
                  "-xxxxxxxxxkxxxxxxxxx--",
                  "----------------------",
				  "----------------------",
                  "-xxxxxxxxxkxxxxxxxxx--",
                  "----------------------",
				  "----------------------",
                  "----------------------"
              ],
              [   "M3",
                  "--xxxxxxxxxxxxx-xxxkx-",
                  "----x---------------B-",
				  "----x---------------x-",
                  "kxxrx-xxxxxxxxxxxxxrx-",
                  "----------------------",
				  "----------------------",
                  "----------------------"
              ],
              [   "M4",
                  "wwwwwwwwwwwwwwwwwwwww-",
                  "----------------------",
				  "----------------------",
                  "wAwwwwwwwwwwwwwwwwwww-",
                  "----------------------",
				  "----------------------",
                  "----------------------"

              ]

          ]
        },
		        { "name" : "CAPUNITNS",
          "class" : "Gds::GdsPatternCapacitor",
          "yoffset": -0.5,
          "xoffset": -0.5,
		  "heightoffset": -100,
          "widthoffset" : -1,
          "verticalGrid" : 1000,
          "horizontalGrid" : 1000,
          "beforePaint" : {
              "copyStringLayers" :[  ["M2","M1"] , ["M2","M3"]   ]
          },
          "fillCoordinatesFromStrings" : [
              [   "M2",
				  "----x-xxxxxxxxxkxxxxxxx---",
				  "----x-----------------x---",
                  "----xxxxxxxxxxxxkxxxx-x---",
                  "----x-----------------x---",
                  "----x-xxxxxxxxxxxxxxxxx---",
                  "----x-----------------x---",
				  "----xxxxxxxxxxxxxxxxx-x---",
                  "----x-----------------x---",
                  "----x-xxxxxxxxxxxxxxxxx---",
                  "----x-----------------x---",
                  "----xxxxxxxxxxxxxxxxx-x---",
                  "----x-----------------x---",
                  "----x-xxxxxxxxxxxxxxxxx---"

              ],
              [   "M4",
                  "----x-xxxxxxxxxxxxxxxxB---",
                  "----x-----------------x---",
                  "----xxxxxxxxxxxxxxxxx-x---",
				  "----x-----------------x---",
                  "----x-xxxxxxxxxxxxxxxxx---",
                  "----x-----------------x---",
                  "----xxxxxxxxxxxxxxxxx-x---",
                  "----A-----------------x---",
                  "----x-xrxxxxxxxxxxxxxxx---",
                  "----x-----------------x---",
                  "----xxxxxxxxxxxxxxrxx-x---",
                  "----x-----------------x---",
                  "----x-xxxxxxxxxxxxxxxxx---"

              ]

          ],
          "afterNew" : {
              "copyColumns" :[
                  { "count" : 9, "offset" : 9,"length" : 2}
              ],
              "copyRows" :   { "count" : 17,"offset" : 0, "length": 7}
          },
		  "afterPaint" : {
			  "translate" : [0,-80000]
		  }

        },

        {"name" : "CAPR" , "inherit" : "CAP", "afterPaint" : { "mirrorCenterY" : 0 }},

        { "name": "CAPX1_CV" ,
          "class" : "Layout::LayoutDigitalCell",
          "afterRoute"  : {
              "addPortOnRects" : [  ["A","M4", "XA1:A"] , ["B", "M3", "XB1:B"]]
          }
        },
        { "name": "CAP32C_CV" , "class" : "Layout::LayoutCapCellSmall","maxcap" : 32,"usem3" : 1},
        { "name": "CDAC6_CV", "class" : "Layout::LayoutCDACSmall"},
        { "name": "CDAC9_CV", "class" : "Layout::LayoutCDACSmall"},
		{ "name": "CDAC8_CV", "class" : "Layout::LayoutCDACSmall" },
        { "name": "CDAC10_CV", "class" : "Layout::LayoutCDACSmall"}

		]
}
